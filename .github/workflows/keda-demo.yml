name: KEDA Demo CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      preset:
        description: 'Demo preset'
        required: false
        default: 'fast'
        type: choice
        options:
        - 'fast'
        - 'standard' 
        - 'slow'
      messages:
        description: 'Number of messages (overrides preset)'
        required: false
        type: string
      processing_time:
        description: 'Processing time per message in seconds (overrides preset)'
        required: false
        type: string
      cooldown:
        description: 'KEDA cooldown period in seconds (overrides preset)'
        required: false
        type: string
      max_replicas:
        description: 'Maximum number of replicas (overrides preset)'
        required: false
        type: string

env:
  KIND_VERSION: v0.20.0
  KUBECTL_VERSION: v1.28.0
  HELM_VERSION: v3.13.0

jobs:
  keda-demo:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install tools
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/${{ env.KUBECTL_VERSION }}/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Install Helm
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh --version ${{ env.HELM_VERSION }}
        
        # Install kind
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/${{ env.KIND_VERSION }}/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind

    - name: Create kind cluster
      run: |
        # Simplified single-node cluster for CI
        kind create cluster --config=- <<EOF
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
        - role: control-plane
          image: kindest/node:v1.28.0
        EOF
        
        kubectl cluster-info
        kubectl wait --for=condition=Ready nodes --all --timeout=300s

    - name: Install KEDA
      run: |
        helm repo add kedacore https://kedacore.github.io/charts
        helm repo update
        helm upgrade --install keda kedacore/keda \
          --namespace keda \
          --create-namespace \
          --wait \
          --timeout 10m
        
        kubectl wait --for=condition=Ready pods --all -n keda --timeout=300s

    - name: Run KEDA demo
      run: |
        chmod +x ./keda-demo
        
        # Build demo command with preset or custom parameters
        DEMO_CMD="./keda-demo start --auto-close --ci"
        
        # Use preset if specified, otherwise build custom command
        if [ -n "${{ github.event.inputs.preset }}" ] && [ "${{ github.event.inputs.preset }}" != "standard" ]; then
          DEMO_CMD="$DEMO_CMD --${{ github.event.inputs.preset }}"
        fi
        
        # Override with custom parameters if provided
        if [ -n "${{ github.event.inputs.messages }}" ]; then
          DEMO_CMD="$DEMO_CMD --messages ${{ github.event.inputs.messages }}"
        fi
        if [ -n "${{ github.event.inputs.processing_time }}" ]; then
          DEMO_CMD="$DEMO_CMD --processing-time ${{ github.event.inputs.processing_time }}"
        fi
        if [ -n "${{ github.event.inputs.cooldown }}" ]; then
          DEMO_CMD="$DEMO_CMD --cooldown ${{ github.event.inputs.cooldown }}"
        fi
        if [ -n "${{ github.event.inputs.max_replicas }}" ]; then
          DEMO_CMD="$DEMO_CMD --max-replicas ${{ github.event.inputs.max_replicas }}"
        fi
        
        echo "Running: $DEMO_CMD"
        timeout 900s $DEMO_CMD || echo "Demo completed or timed out"

    - name: Collect logs and cleanup
      if: always()
      run: |
        echo "=== Final verification ==="
        
        # Quick verification that demo ran
        if kubectl get namespace keda-demo &>/dev/null; then
          echo "✅ Demo namespace exists"
          kubectl get pods -n keda-demo || true
          kubectl get scaledobject -n keda-demo || true
        else
          echo "ℹ️  Demo namespace not found (may have been cleaned up)"
        fi
        
        # Collect logs on failure
        if [ "${{ job.status }}" = "failure" ]; then
          echo "=== Collecting diagnostic information ==="
          kubectl get nodes -o wide || true
          kubectl get all -n keda || true
          kubectl get events -n keda-demo --sort-by='.lastTimestamp' || true
        fi
        
        # Cleanup using script (with CI mode to avoid prompts)
        echo "=== Cleaning up ==="
        ./keda-demo clean --ci || echo "Cleanup completed or already clean"

    - name: Delete kind cluster
      if: always()
      run: |
        kind delete cluster || echo "Cluster already deleted"